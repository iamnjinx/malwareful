import pygame
import random
import numpy as np
from os import path

img_dir = path.join(path.dirname(__file__), 'img')
snd_dir = path.join(path.dirname(__file__), 'snd')

WIDTH = 1080
HEIGHT = 720
FPS = 60

# define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# initialize pygame and create window
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Malwareful")
clock = pygame.time.Clock()

font_name = pygame.font.match_font('arial')
def draw_text(surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)

# 현재 문제점.
# 1. 마우스 위치에 따라 캐릭터 회전 --> !힘들거 같음.
# 2. 폴더 감염 시, 추가 캐릭터의 이동속도 이상 있음.
# 3. 추가 캐릭터 발사여부 이상 있음. --> 해결

class Player(pygame.sprite.Sprite):
    def __init__(self, pos, num):
        pygame.sprite.Sprite.__init__(self)
        self.spritee = virus
        self.image = pygame.transform.scale(self.spritee, (50, 50))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        #print(self.rect)
        self.radius = 20
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.speedx = 0
        self.speedy = 0
        self.shield = 100
        self.lives = 3
        self.hidden = False
        self.hide_timer = pygame.time.get_ticks()
        self.power = 1
        self.power_time = pygame.time.get_ticks()
        self.speed = 5
        self.last_shot = pygame.time.get_ticks()
        self.last_got_shot = pygame.time.get_ticks()
        self.shoot_delay = 200
        self.is_shooting = False
        self.is_flipped = False
        self.gun_pos = (30, -10)
        self.number = num
        self.debuffed = False
        self.startcounting = False

    def update(self):
        self.image = pygame.transform.scale(self.spritee, (50, 50))
        self.speedx = 0
        self.speedy = 0

        if self.debuffed:
            now2 = pygame.time.get_ticks()
            #print(now2 - self.last_got_shot)
            if now2 - self.last_got_shot > 2000:
                self.last_got_shot = now2
                if self.startcounting: 
                    self.debuffed = False
                    self.startcounting = False
                self.startcounting = True

        if self.is_shooting:
            self.speed = 1
        else:
            self.speed = 4
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_a]:
            self.speedx = -self.speed
        if keystate[pygame.K_d]:
            self.speedx = self.speed
        if keystate[pygame.K_w]:
            self.speedy = -self.speed
        if keystate[pygame.K_s]:
            self.speedy = self.speed
        if keystate[pygame.MOUSEBUTTONDOWN]:
            self.shoot()
            #print("shoot")
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.bottom > HEIGHT:
            self.rect.bottom = HEIGHT
        if self.rect.top < 0:
            self.rect.top = 0

    def shoot(self, tarPos):
        startPos = (self.rect.centerx + self.gun_pos[0], self.rect.centery + gun_pos[1])
        now = pygame.time.get_ticks()

        if self.debuffed: self.shoot_delay = 2000
        else: self.shoot_delay = 200
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            bullet = Bullet(startPos, tarPos)
            all_sprites.add(bullet)
            bullets.add(bullet)

    def playerPos(self, pointer):
        if self.number == 0:
            pointer = player.rect.center

    def player_cant_shoot(self):
        self.debuffed = True

class Bullet(pygame.sprite.Sprite):
    def __init__(self, pos, tarPos):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(bullet, (10, 10))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.speed = 20
        difx = tarPos[0] - pos[0]
        dify = tarPos[1] - pos[1]
        vector = np.array([difx, dify])
        unit_vector = vector / np.linalg.norm(vector)

        self.difx = unit_vector[0]
        self.dify = unit_vector[1]

    def update(self):

        self.speedx = self.difx * self.speed
        self.speedy = self.dify * self.speed
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        # kill if it moves off the top of the screen
        if self.rect.left < 0:
            self.kill()
        elif self.rect.right > WIDTH:
            self.kill()
        elif self.rect.top < 0:
            self.kill()
        elif self.rect.bottom > HEIGHT:
            self.kill()


class Folder(pygame.sprite.Sprite):
    def __init__(self, pos, is_infected, num):
        pygame.sprite.Sprite.__init__(self)
        if is_infected:
            self.image = pygame.transform.scale(folder_img_infected, (50, 50))
            self.HP = 0
        else: 
            self.image = pygame.transform.scale(folder_img, (50, 50))
            self.HP = 100
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.is_infected = is_infected
        self.has_extra = False
        self.number = num
        self.players = pygame.sprite.Group()

    def update(self):
        if not self.is_infected:
            if self.HP < 0:
                self.image = pygame.transform.scale(folder_img_infected, (50, 50))
                self.is_infected = True
                self.HP = 0
            elif self.HP < 25: self.image = pygame.transform.scale(folder_img_infected75, (50, 50))
            elif self.HP < 50: self.image = pygame.transform.scale(folder_img_infected50, (50, 50))
            elif self.HP < 75: self.image = pygame.transform.scale(folder_img_infected25, (50, 50))

        else:
            if self.HP > 100:
                self.image = pygame.transform.scale(folder_img, (50, 50))
                self.is_infected = False
                self.HP = 100
            elif self.HP > 75: self.image = pygame.transform.scale(folder_img75, (50, 50))
            elif self.HP > 50: self.image = pygame.transform.scale(folder_img50, (50, 50))
            elif self.HP > 25: self.image = pygame.transform.scale(folder_img25, (50, 50))

        # 체력 바 뒤

        # 체력 바 채움
        
    def extra_player(self, pos):
        player = Player(pos)
        all_sprites.add(player)
        players.add(player)

class vaccineA(pygame.sprite.Sprite):
    def __init__(self, pos):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(vaccine_a, (50, 50))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.closestPos = (1000,1000)
        self.last_shot = pygame.time.get_ticks()
        self.shoot_delay = 200
    
    def update(self):
        startPos = (self.rect.centerx, self.rect.centery)
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            bullet = BulletV(startPos, self.closestPos)
            all_sprites.add(bullet)
            bulletVs.add(bullet)

    def getNearestTarget(self, targets):
        self.closestPos = (1000,1000)
        for target in targets:
            dist = pygame.math.Vector2(self.rect.x, self.rect.y).distance_to((self.closestPos[0], self.closestPos[1]))
            dist_new = pygame.math.Vector2(self.rect.x, self.rect.y).distance_to((target[0], target[1]))
            if dist_new < dist:
                self.closestPos = (target[0], target[1] + 25)
        #print(self.closestPos)

class BulletV(pygame.sprite.Sprite):
    def __init__(self, pos, tarPos):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(bullet_vac, (10, 10))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.speed = 20
        difx = tarPos[0] - pos[0]
        dify = tarPos[1] - pos[1]
        vector = np.array([difx, dify])
        unit_vector = vector / np.linalg.norm(vector)

        self.difx = unit_vector[0]
        self.dify = unit_vector[1]

    def update(self):

        self.speedx = self.difx * self.speed
        self.speedy = self.dify * self.speed
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        # kill if it moves off the top of the screen
        if self.rect.left < 0:
            self.kill()
        elif self.rect.right > WIDTH:
            self.kill()
        elif self.rect.top < 0:
            self.kill()
        elif self.rect.bottom > HEIGHT:
            self.kill()

class vaccineB(pygame.sprite.Sprite):
    def __init__(self, pos):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(vaccine_b, (50, 50))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.startPos = pos
        self.rect.centerx = pos[0]
        self.rect.centery = pos[1]
        self.tarPos = (0,0)
        self.speedx = 0
        self.speedy = 0
        self.speed = 0.5
        self.speed2 = 0
        self.stunned = False
        self.last_got_shot = pygame.time.get_ticks()
        self.startcounting = False
    
    def update(self):
        print(self.rect.center)
        if self.stunned:
            now2 = pygame.time.get_ticks()
            print(now2 - self.last_got_shot)
            self.speed = 0
            self.rect.center = (2000,2000)
            if now2 - self.last_got_shot > 2000:
                self.last_got_shot = now2
                if self.startcounting: 
                    self.stunned = False
                    self.startcounting = False
                    self.speed = 0.5
                    self.rect.center = self.startPos
                self.startcounting = True

        difx = self.tarPos[0] - self.rect.centerx
        dify = self.tarPos[1] - self.rect.centery
        vector = np.array([difx, dify])
        unit_vector = vector / np.linalg.norm(vector)

        self.difx = unit_vector[0]
        self.dify = unit_vector[1]

        #print(self.difx, self.dify)
        if self.difx >= 0: self.difx += 2
        else: self.difx -= 1

        if self.dify >= 0: self.dify += 2
        else: self.dify -= 1

        self.speedx = self.difx * (self.speed + self.speed2)
        self.speedy = self.dify * (self.speed + self.speed2)
        #print(self.speedx, self.speedy)
        self.rect.x += self.speedx
        self.rect.y += self.speedy
    
    def targetPlayer(self, playerPos):
        self.tarPos = playerPos
    
    def stunnneed(self):
        print("stunned")
        #self.stunned = True

# Load all game graphics
background = pygame.image.load('./img/BG.png')
background_rect = background.get_rect()
virus = pygame.image.load('./img/virus.png')
bullet = pygame.image.load('./img/bullet.png')

vaccine_a = pygame.image.load('./img/vaccine_a.png')
vaccine_b = pygame.image.load('./img/vaccine_b.png')
bullet_vac = pygame.image.load('./img/bullet_vac.png')

folder_img = pygame.image.load('./img/folder.png')
folder_img25 = pygame.image.load('./img/folder25.png')
folder_img50 = pygame.image.load('./img/folder50.png')
folder_img75 = pygame.image.load('./img/folder75.png')
folder_img_infected25 = pygame.image.load('./img/folder_infected_25.png')
folder_img_infected50 = pygame.image.load('./img/folder_infected_50.png')
folder_img_infected75 = pygame.image.load('./img/folder_infected_75.png')
folder_img_infected = pygame.image.load('./img/folder_infected.png')

# parameters
gun_pos = (100, -10)
folder_positions = [(100, 100), (100, 200), (300, 100), (300, 600), (400, 300), (400, 400), (500, 200), (600, 100), (700,500), \
                    (800, 200), (800, 300), (800, 400), (900, 100), (900, 300), (1000, 300), (1000, 400), (1000, 600)]
player_Pos = (75,680)
infected_folder_positions = []

count_folder = 0
count_infectedFolder = 0

vaccine_positions = [[(800, 50), False], [(300, 50), False], [(50, 400), False], [(700, 650), False], [(1050, 200), False], \
                     [(50, 50), False], [(200, 650), False], [(1050, 650), False], [(900, 500), False]]

# Game loop
running = True
gameOver = True
while running:
    #초기화
    if gameOver:
        gameOver = False
        screen.blit(background, background_rect)
        all_sprites = pygame.sprite.Group()
        players = pygame.sprite.Group()
        bullets = pygame.sprite.Group()
        folders = pygame.sprite.Group()
        vaccineAs = pygame.sprite.Group()
        bulletVs = pygame.sprite.Group()
        vaccineBB = vaccineB(vaccine_positions[8][0])
        vaccineBBB = pygame.sprite.Group()
        all_sprites.add(vaccineBB)
        vaccineBBB.add(vaccineBB)
        vaccine_positions[8][1] = True
        folder = Folder((100, 600), True, count_folder)
        infected_folder_positions.append((100,600))
        folders.add(folder)
        all_sprites.add(folder)
        count_folder+=1
        #player = Player(player_Pos)
        #players.add(player)
        #all_sprites.add(player)

        for folder_pos in folder_positions:
            folder = Folder(folder_pos, False, count_folder)
            all_sprites.add(folder)
            folders.add(folder)
            count_folder+=1

    # keep loop running at the right speed
    clock.tick(FPS)

    pos = pygame.mouse.get_pos()

    infected_folder_positions = []
    count_infectedFolder = 0

    for folderr in folders:
        if folderr.is_infected and not folderr.has_extra:
            ranX = random.randrange(-50, 50)
            ranY = random.randrange(-50, 50)
            ranPos = (player_Pos[0] + ranX, player_Pos[1] + ranY)
            player = Player(ranPos, folderr.number)
            all_sprites.add(player)
            players.add(player)
            folderr.has_extra = True
        # target of vaccines.
        if folderr.is_infected: 
            count_infectedFolder += 1
            infected_folder_positions.append(folderr.rect.center)
        #
        if folderr.has_extra and not folderr.is_infected:
            for player in players:
                if folderr.number == player.number:
                    player.kill()


    # 백신 생성
    for i in range(7):
        if count_infectedFolder == (i+1) * 2 and not vaccine_positions[i][1]:
            vaccine = vaccineA(vaccine_positions[i][0])
            vaccineAs.add(vaccine)
            all_sprites.add(vaccine)
            vaccine_positions[i][1] = True

    if count_infectedFolder == 3 and not vaccine_positions[8][1]:
        vaccineBB = vaccineB(vaccine_positions[8][0])
        all_sprites.add(vaccineBB)
        vaccine_positions[8][1] = True 
    elif count_infectedFolder >= 3:
        vaccineBB.speed2 = 0.01

    for vaccine in vaccineAs:
        vaccine.getNearestTarget(infected_folder_positions)

    #상호작용시 이벤트
    for event in pygame.event.get():
        for playerss in players:
            # Player sprite's direction depending on mouse position (Left)
            if pos[0] < playerss.rect.x + 25 and not playerss.is_flipped:
                playerss.spritee = pygame.transform.flip(playerss.spritee, True, False)
                playerss.is_flipped = True
                playerss.gun_pos = (-30, -10)

            # Player sprite's direction depending on mouse position (Right)
            elif pos[0] >= playerss.rect.x + 25 and playerss.is_flipped:
                playerss.spritee = pygame.transform.flip(playerss.spritee, True, False)
                playerss.is_flipped = False
                playerss.gun_pos = (30, -10)

            # check for closing window
            if event.type == pygame.QUIT:
                running = False

    # Update
    all_sprites.update()

    player_Pos = player.rect.center
    vaccineBB.targetPlayer(player_Pos)
    #print(vaccineBB.rect.center)

    # Player shoot bullets while mouse_right pressed
    if pygame.mouse.get_pressed(3)[2]:
        for playerss in players:
            playerss.shoot(pos)
            playerss.is_shooting = True
    else: 
        for playerss in players:
            playerss.is_shooting = False

    # bullet hits folder
    for folderr in folders:
        # Virus bullet
        if not folderr.is_infected: 
            hits = pygame.sprite.spritecollide(folderr, bullets, True)
            for hit in hits:
                folderr.HP -= 3
                #print(folderr.HP)
        # Vaccine bullet
        else:
            hits = pygame.sprite.spritecollide(folderr, bulletVs, True)
            for hit in hits:
                folderr.HP += 1
                #print(folderr.HP)

    # vaccineB hits player
    for playerr in players:
        hits = pygame.sprite.spritecollide(playerr, vaccineBBB, True)
        for hit in hits:
            # Gameover
            print("GAMEOVER: YOU GOT HIT BY VACCINEB")
            pygame.quit()


    # Game Over / Clear conditions.
    if len(players.sprites()) == 0:
        print("GAMEOVER: EVERY FOLDERS GOT CURED")
        pygame.quit()
    elif len(infected_folder_positions) == len(folder_positions)+1:
        print("GAME CLEAR: EVERY FOLDERS GOT INFECTED")
        pygame.quit()


    # Draw / render
    screen.fill(BLACK)
    screen.blit(background, background_rect)
    all_sprites.draw(screen)

    # *after* drawing everything, flip the display
    pygame.display.flip()

pygame.quit()